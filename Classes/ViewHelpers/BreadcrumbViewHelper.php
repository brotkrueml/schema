<?php

declare(strict_types=1);

/*
 * This file is part of the "schema" extension for TYPO3 CMS.
 *
 * For the full copyright and license information, please read the
 * LICENSE.txt file that was distributed with this source code.
 */

namespace Brotkrueml\Schema\ViewHelpers;

use Brotkrueml\Schema\Core\Exception\MissingBreadcrumbArgumentException;
use Brotkrueml\Schema\Manager\SchemaManager;
use Brotkrueml\Schema\Type\TypeFactory;
use Psr\Http\Message\ServerRequestInterface;
use TYPO3Fluid\Fluid\Core\ViewHelper\AbstractViewHelper;

/**
 * ViewHelper for building the breadcrumb structure and assigning it
 * to the SchemaManager
 *
 * The result of the MenuProcessor (special = breadcrumb) can be
 * given to the view helper:
 *
 * <code title="Configuring the MenuProcessor in TypoScript">
 * page.10 = FLUIDTEMPLATE
 * page.10 {
 *   // ... Your other configuration
 *
 *   dataProcessing {
 *     10 = TYPO3\CMS\Frontend\DataProcessing\MenuProcessor
 *     10 {
 *       special = rootline
 *       as = breadcrumb
 *     }
 *   }
 * }
 * </code>
 *
 * As default the first entry (which is mostly the start page)
 * is stripped from the structured data because it is not necessary.
 * But you can include it setting the attribute renderFirstItem="1".
 *
 * = Examples =
 * <code title="Render structured data without the start page">
 * <schema:breadcrumbMarkup breadcrumb="{breadcrumb}">
 * </code>
 *
 * <code title="Render structured data with all items given">
 * <schema:breadcrumbMarkup breadcrumb="{breadcrumb}" renderFirstItem="1">
 * </code>
 */
final class BreadcrumbViewHelper extends AbstractViewHelper
{
    private const DEFAULT_WEBPAGE_TYPE = 'WebPage';

    public function __construct(
        private readonly SchemaManager $schemaManager,
        private readonly TypeFactory $typeFactory,
    ) {}

    public function initializeArguments(): void
    {
        parent::initializeArguments();

        $this->registerArgument(
            'breadcrumb',
            'array',
            'The breadcrumb generated by the MenuProcessor or an equivalent data structure',
            true,
        );

        $this->registerArgument(
            'renderFirstItem',
            'bool',
            'Take the first item into the breadcrumb, normally this is the home page which is omitted',
            false,
            false,
        );
    }

    public function render(): void
    {
        $breadcrumb = $this->arguments['breadcrumb'];
        $shouldRenderFirstItem = (bool) ($this->arguments['renderFirstItem'] ?? false);
        if (! $shouldRenderFirstItem) {
            \array_shift($breadcrumb);
        }

        if ($breadcrumb === []) {
            return;
        }

        $this->checkBreadcrumbStructure($breadcrumb);

        $request = $this->renderingContext->getAttribute(ServerRequestInterface::class);
        $siteUrl = (string) $request->getAttribute('site')->getBase();

        $breadcrumbList = $this->typeFactory->create('BreadcrumbList');
        $itemsCount = \count($breadcrumb);
        for ($i = 0; $i < $itemsCount; $i++) {
            $id = (string) $breadcrumb[$i]['link'];
            if (! \str_contains($id, '://')) {
                $id = $siteUrl . \ltrim($id, '/');
            }

            $itemType = $this->typeFactory->create(self::DEFAULT_WEBPAGE_TYPE);
            $itemType->setId($id);

            $item = $this->typeFactory->create('ListItem')->setProperties([
                'position' => $i + 1,
                'name' => $breadcrumb[$i]['title'],
                'item' => $itemType,
            ]);

            $breadcrumbList->addProperty('itemListElement', $item);
        }

        $this->schemaManager->addType($breadcrumbList);
    }

    /**
     * @param list<array{title?: string, link?: string}> $breadcrumb
     */
    private function checkBreadcrumbStructure(array $breadcrumb): void
    {
        foreach ($breadcrumb as $item) {
            if (! isset($item['title'])) {
                throw MissingBreadcrumbArgumentException::fromMissingTitle($breadcrumb);
            }

            if (! isset($item['link'])) {
                throw MissingBreadcrumbArgumentException::fromMissingLink($breadcrumb);
            }
        }
    }
}
