name: CI

on:
  push:
    paths:
      - 'composer.json'
      - '.github/workflows/ci.yml'
      - '**.php'
  pull_request:
    paths:
      - 'composer.json'
      - '.github/workflows/ci.yml'
      - '**.php'

jobs:
  build:
    name: Build PHP/TYPO3
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - php-versions: '8.1'
            typo3-versions: '^11'
          - php-versions: '8.1'
            typo3-versions: '^12'
          - php-versions: '8.2'
            typo3-versions: '^11'
          - php-versions: '8.2'
            typo3-versions: '^12'
          - php-versions: '8.2'
            typo3-versions: '^13'
          - php-versions: '8.3'
            typo3-versions: '^11'
          - php-versions: '8.3'
            typo3-versions: '^12'
          - php-versions: '8.3'
            typo3-versions: '^13'
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup PHP version
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring
      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Install composer dependencies
        run: |
          composer remove infection/infection --dev --no-update
          composer require typo3/cms-core=${{ matrix.typo3-versions }} --no-progress --prefer-dist --optimize-autoloader
      - name: Run PHP linter
        run: |
          find . -type f -name '*.php' ! -path "./.Build/*" -print0 | xargs -0 -n1 -P4 php -l -n | (! grep -v "No syntax errors detected" )
      - name: Run unit tests
        run: |
          .Build/bin/phpunit -c Tests/phpunit.xml.dist --testsuite Unit
      - name: Run functional tests
        run: |
          .Build/bin/phpunit -c Tests/phpunit.xml.dist --testsuite Functional
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup PHP version
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          coverage: xdebug
          extensions: mbstring
      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Install composer dependencies
        run: |
          composer --version
          composer update --no-progress --prefer-dist --optimize-autoloader
      - name: Normalize composer.json
        run: |
          composer normalize --dry-run
      - name: Verify PSR-4 namespace correctness
        run: |
          composer dumpautoload --optimize --strict-psr
      - name: Check coding standards
        if: always()
        run: |
          .Build/bin/ecs check --no-progress-bar
      - name: Check coding standards in documentation
        if: always()
        run: |
          .Build/bin/ecs check --no-progress-bar --config=ecs.docs.php
      - name: Run phpstan
        if: always()
        run: |
          make phpstan
      - name: Run rector
        if: always()
        run: |
          make rector-dry
      - name: Run mutation tests
        if: always()
        env:
          INFECTION_BADGE_API_KEY: ${{ secrets.INFECTION_BADGE_API_KEY }}
        run: |
          make mutation
      - name: Generate code coverage
        run: |
          make code-coverage
      - name: Send code coverage report to coveralls.io
        if: github.event_name != 'pull_request'
        run: .Build/bin/php-coveralls -v
        env:
          COVERALLS_RUN_LOCALLY: 1
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
